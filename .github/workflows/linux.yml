name: Linux

on: [push, pull_request]

jobs:
  build:
    name: GCC-${{matrix.build_type}}-${{matrix.lib}}-${{matrix.components}}-${{matrix.gpu}}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      CCACHE_DIR: ${{github.workspace}}/ccache
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: true
      matrix:
        build_type: [Release, Debug]
        lib: [shared, static]
        components: [minimal, lgpl, gpl]
        gpu: [no-cuda, cuda]

    steps:
    - uses: actions/checkout@v2

    - name: Cache CMake
      id: cache-cmake
      uses: actions/cache@v2
      with:
        path: cmake-3.22.0-linux-x86_64
        key: ${{runner.os}}-cmake-3.22.0

    - name: Update Packages
      run: |
        sudo apt-get update

    - name: Setup Download Dependencies
      if: steps.cache-cmake.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y \
          wget

    - name: Download CMake
      if: steps.cache-cmake.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/Kitware/CMake/releases/download/v3.22.0/cmake-3.22.0-linux-x86_64.tar.gz
        tar xvf cmake-3.22.0-linux-x86_64.tar.gz

    - name: Setup CMake
      run: |
        echo $(pwd)/cmake-3.22.0-linux-x86_64/bin >> $GITHUB_PATH

    - name: Setup Minimal Dependencies
      run: |
        sudo apt-get install -y \
          build-essential \
          ccache \
          gfortran \
          libblas-dev \
          liblapack-dev \
          libmetis-dev \
          libomp-dev \
          libtbb-dev \
          ninja-build \
          nvidia-cuda-toolkit \
          wget

    - name: Setup CUDA Dependencies
      if: ${{matrix.gpu == 'cuda'}}
      run: |
        sudo apt-get install -y \
          ninja-build \
          nvidia-cuda-toolkit

    # Due to a mismatch in LTO version used by GCC and CUDA compiler, enable
    # -flto only when building the non-CUDA version of the library.
    - name: Setup Environment
      if: ${{matrix.build_type == 'Release' && matrix.gpu != 'cuda'}}
      run: |
        echo 'CFLAGS=-flto' >> $GITHUB_ENV
        echo 'CXXFLAGS=-flto' >> $GITHUB_ENV

    - name: Cache Build
      id: cache-build
      uses: actions/cache@v2
      with:
        path: ${{env.CCACHE_DIR}}
        key: ${{runner.os}}-ccache-${{github.run_id}}
        restore-keys: ${{runner.os}}-ccache-

    - name: Configure
      run: |
        cmake -S . -B build_${{matrix.build_type}}/ \
              -DBUILD_SHARED_LIBS=${{matrix.lib == 'shared'}} \
              -DCMAKE_C_COMPILER_LAUNCHER:FILEPATH=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER:FILEPATH=ccache \
              -DCMAKE_Fortran_COMPILER_LAUNCHER:FILEPATH=ccache \
              -DCMAKE_INSTALL_PREFIX:PATH=./install \
              -DWITH_CUDA=${{matrix.gpu == 'cuda'}} \
              -DWITH_GPL=${{matrix.components == 'gpl'}} \
              -DWITH_LGPL=${{contains(matrix.components, 'gpl')}} \
              -G Ninja

    - name: Build
      run: |
        cmake --build build_${{matrix.build_type}}/ \
              --config ${{matrix.build_type}}

    - name: Install
      run: |
        cmake --build build_${{matrix.build_type}}/ \
              --config ${{matrix.build_type}} \
              --target install
